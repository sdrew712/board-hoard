import React from "react";
import useCart from "../../hooks/useCart";

import Divider from "@mui/material/Divider";
import ListItem from "@mui/material/ListItem";
import TextField from "@mui/material/TextField";
import Button from "@mui/material/Button";

import "./index.scss";

const Cart = () => {
  const { cart, setCart } = useCart();

  //stringify cart to send to backend
  const stringCart = JSON.stringify(cart);

  const handleQuantityChange = (quantity, id) => {
    console.log(quantity);
    const cartCopy = [...cart];

    //find product in cart
    const existingItem = cartCopy.find((cartItem) => cartItem.id === id);
    //find index of product in cart
    const productIndex = cartCopy.indexOf(existingItem);

    //if the selected quantity is greater than 0, update it
    if (quantity > 0) {
      cartCopy[productIndex].quantity = quantity;
      setCart(cartCopy);
    }
    if (quantity === "0") {
      cartCopy.splice(productIndex, 1);
      setCart(cartCopy);
    }
  };

  const handleRemoveItem = (id) => {
    // remove it from the state(causing rerender and its removal from cart)
    const cartCopy = [...cart];

    //find product in cart
    const existingItem = cartCopy.find((cartItem) => cartItem.id === id);
    //find index of product in cart
    const productIndex = cartCopy.indexOf(existingItem);

    cartCopy.splice(productIndex, 1);

    setCart(cartCopy);
  };

  //map over the items in cart, returning html to display each
  const cartItems = cart.map((item) => {
    return (
      <div key={item.id}>
        <ListItem>
          <div className="cart-item">
            <h3 className="item-name">{item.name}</h3>
            <img src={item.imageURL} alt={`${item.name} deck`} className="cart-image" />
            <h3>{item.brand}</h3>
            <p>Length: {item.length}"</p>
            <p>Flex: {item.flex}</p>
            <h3>${item.price * item.quantity}</h3>

            <TextField
              id="outlined-number"
              label="Quantity"
              type="number"
              min="1"
              defaultValue={item.quantity}
              onChange={({ target }) => handleQuantityChange(target.value, item.id)}
              InputLabelProps={{
                shrink: true,
              }}
            />

            <Button
              variant={"contained"}
              color="secondary"
              sx={{ margin: "5px" }}
              onClick={() => handleRemoveItem(item.id)}
            >
              X
            </Button>
          </div>
        </ListItem>
        <Divider />
      </div>
    );
  });

  //if cart is empty, display message
  if (cart.length === 0) {
    return (
      <div id="cart-empty">
        <p>Your cart is empty</p>
      </div>
    );
  }

  return (
    <>
      {/* post to endpoint that redirects to the url generated by stripe for checkout */}
      <form action="http://localhost:3001/create-checkout-session" method="POST">
        {cartItems}
        <input type="hidden" name="cart" value={stringCart} />
        <div id="checkout-button-container">
          <Button variant={"contained"} color="secondary" sx={{ margin: "5px" }} type="submit">
            Checkout
          </Button>
        </div>
      </form>
    </>
  );
};

export default Cart;

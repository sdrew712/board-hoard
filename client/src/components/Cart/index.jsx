import React from "react";
import useCart from "../../hooks/useCart";

import { styled, useTheme } from "@mui/material/styles";
import Drawer from "@mui/material/Drawer";
import CssBaseline from "@mui/material/CssBaseline";
import IconButton from "@mui/material/IconButton";
import MenuIcon from "@mui/icons-material/Menu";
import ChevronLeftIcon from "@mui/icons-material/ChevronLeft";
import ChevronRightIcon from "@mui/icons-material/ChevronRight";
import LocalMallIcon from "@mui/icons-material/LocalMall";

const DrawerHeader = styled("div")(({ theme }) => ({
  display: "flex",
  alignItems: "center",
  padding: theme.spacing(0, 1),
  // necessary for content to be below app bar
  ...theme.mixins.toolbar,
  justifyContent: "flex-start",
}));

const Cart = ({ open, setOpen, drawerWidth }) => {
  const theme = useTheme();
  const { cart, setCart } = useCart();

  //stringify cart to send to backend
  const stringCart = JSON.stringify(cart);

  const handleQuantityChange = (quantity, productId) => {
    const cartCopy = [...cart];

    //find product in cart
    const existingItem = cartCopy.find((cartItem) => cartItem.productId === productId);
    //find index of product in cart
    const productIndex = cartCopy.indexOf(existingItem);

    //if the selected quantity is greater than 0, update it
    if (quantity > 0) {
      cartCopy[productIndex].quantity = quantity;
      setCart(cartCopy);
    }
    //else, remove it from the state(causing rerender and its removal from cart)
    else {
      cartCopy.splice(productIndex, 1);
      setCart(cartCopy);
    }
  };

  //map over the state of items in cart, returning html to display each
  const cartItems = cart.map((item) => {
    return (
      <div key={item.productId}>
        <h2>{item.productName}</h2>
        <p>${item.productPrice * item.quantity}</p>
        <label htmlFor="quantity">Quantity:</label>
        <input
          type="number"
          name="quantity"
          id="quantity"
          defaultValue={item.quantity}
          onChange={({ target }) => handleQuantityChange(target.value, item.productId)}
        />
      </div>
    );
  });

  //if cart is empty, display message
  if (cart.length === 0) {
    return <p>Your cart is empty</p>;
  }

  const handleDrawerOpen = () => {
    setOpen(true);
  };

  const handleDrawerClose = () => {
    setOpen(false);
  };

  return (
    <span sx={{ display: "flex" }}>
      <CssBaseline />
      <LocalMallIcon
        color="secondary"
        aria-label="open drawer"
        edge="end"
        onClick={handleDrawerOpen}
        sx={{ ...(open && { display: "none" }) }}
      >
        <MenuIcon />
      </LocalMallIcon>
      <Drawer
        sx={{
          width: drawerWidth,
          flexShrink: 0,
          "& .MuiDrawer-paper": {
            width: drawerWidth,
          },
        }}
        variant="persistent"
        anchor="right"
        open={open}
      >
        <DrawerHeader>
          <IconButton onClick={handleDrawerClose} color="secondary">
            {theme.direction === "rtl" ? <ChevronLeftIcon /> : <ChevronRightIcon />}
          </IconButton>
        </DrawerHeader>
        {/* post to endpoint that redirects to the url generated by stripe for checkout */}
        <form action="http://localhost:3001/create-checkout-session" method="POST">
          {cartItems}
          <input type="hidden" name="cart" value={stringCart} />
          <button type="submit">Checkout</button>
        </form>
      </Drawer>
    </span>
  );
};

export default Cart;
